This manual was written aiming to briefly explain the function of each file in folders /src and /scripts.
First a table is presented containing the types of every topic generated by those topics.After that a concise abstract about the each implemented node is presented

*TOPICS*
*****************************************************************
*          TOPIC NAME           *             TYPE              *
*****************************************************************
* '/gyroscope_publisher'        * geometry_msgs/Point.h         *
* '/accelerometer_publisher'    * geometry_msgs/Point.h         *
* '/magnet'                     * std_msgs/String.h             *
* '/left_motor'                 * std_msgs/Float64.h            *
* '/right_motor'                * std_msgs/Float64.h            *
* '/movingAverageAccelerometer' * geometry_msgs/Point.h         *
* '/gyroAngle'                  * std_msgs/Float64.h            *
* '/movingAverageGyroscope'     * geometry_msgs/Point.h         *
* '/futurePose'                 * geometry_msgs/Point.h         *
* '/Pose'                       * geometry_msgs/Point.h         *
* '/distState'                  * std_msgs/Float64.h            *
* '/angleState'                 * std_msgs/Float64.h            *
* '/velState'                   * std_msgs/Float64.h            *
* '/PositionState'              * geometry_msgs/Point.h         *
* '/turtle/cmd_vel'             * geometry_msgs/Twist.h         *
*****************************************************************	

/scripts
	*These files were coded in Python, and as by now, all of them require some external library, so if one of them is not working, try to check if the libraries are installed and i2c is enabled (depending on the sampling rate required, the default frequency of 1 kHz of i2c might have to be increased). Once these files are modified, remember to recompile the workspace, even though they are executed by an interpreter, the compiler will stablish the dependencies for the ROS environment*
	
	/gyroAccPub.py
		This node is capable of reading the values of the MPU6050 registers and make available this data in a more appropiate scale(m/s² for the linear accelerations and º/s for the 			angular speed). Also this is the node were the data from calibration should be used subtracting the average values obtained by the node /calibrationGyroAccPub in the variables 			Ax, Ay, Az, Gx, Gy and Gz. Notice that this is the node that must be used for real time measurements of acceleration and angular speed.
		Nodes:
			'MPU6050'
		Subscribers:
			None
		Publishers:
			'/gyroscope_publisher'
			'/accelerometer_publisher'
	/calibrationGyroAccPub.py
		This node is similar to /gyroAccPub.py besides its final uses. /calibrationGyroAccPub.py must only be used when calibrating the device because this node only publishes the raw data 			without subtracting the average of measurements when the GASRobot is idle.
		Nodes:
			'MPU6050'
		Subscribers:
			None
		Publishers:
			'/gyroscope_publisher'
			'/accelerometer_publisher'
	/magnetPub.py
		This node is capable of reading the values of the PY-QMC5883L and publish the compass deviation.
		Nodes:
			'Compass'
		Subscribers:
			None
		Publishers:
			'/magnet'
	/motor.py
		This node presents a generic class for motor implementation. By default is implemented to receive two values applied to the PWM signal connected to two motors of the GASRobot. 			Although, any number of motor could be accessed through this node, just by properly declaring new Motor objects in it.
		Nodes:
			'Motor'
		Subscribers:
			'/left_motor'
			'/right_motor'
		Publishers:
			None

/src
	*These files were coded in C++, and are in general simpler than the nodes from /scripts. Some of them represent important math operation blocks that can be composed in a more complex network 		of nodes. Besides recompiling the workspace, when modifying this nodes or creating new ones, check if the proper linking is ready in CMakeLists.txt*
	
	/accFilter.cpp
		This node receives the data from the accelerometer and outputs the moving average ot its values.
		Nodes:
			'AverageFilterAcc'
		Subscribers:
			'/accelerometer_publisher'
		Publishers:
			"/movingAverageAccelerometer"
	/angleControl.cpp
		This node receives the data of angular deviation from a reference and outputs the commands for 'Motor' to adjust the angular up to a tolerance.
		Nodes:
			'angleControl'
		Subscribers:
			'/gyroAngle'
		Publishers:
			'/left_motor'
			'/right_motor'
	/calibration.cpp
		This node should be executed alongside /calibrationGyroAccPub.py and the GASRobot must be put on a stable surface without movement. The measurements are then averaged after a N number 		of iterations. After that, the values calculated are printed and can be used to calibrate the \gyroAccPub.py measurements.
		Nodes:
			'calibration'
		Subscribers:
			'/accelerometer_publisher'
			'/gyroscope_publisher'
		Publishers:
			None
	/controller.cpp
		This node is used to set references for x and y position, as well angle. This values are then compared with their actual values and the differences between then are published for some 		other controller node force the desired pose.
		Nodes:
			'Controller'
		Subscribers:
			'/futurePose'
			'/Pose'
		Publishers:
			'/distState'
			'/angleState'
	/distanceController.cpp 
		This node is still in development, but will be used for controlling the PWM duty cycles of the motors, once the x and y deviation are calculated by the 'Controller' node.
		Nodes:
			'distanceController'
		Subscribers:
			'/VelState'
			'/angleState'
		Publishers:
			'/left_motor'
			'/right_motor'
	/gyroIntegrator.cpp
		This node receives the angular speed, integrates its values and outputs the angle deviation.
		Nodes:
			'GyroIntegrator'
		Subscribers:
			'/movingAverageGyroscope'
		Publishers:
			'/gyroAngle'
	/movingAverage.cpp
		This file is similar to /accFilter, but outputs the moving averages for both the accelerometer and gyroscope.
		Nodes:
			'AverageFilterIMU'
		Subscribers:
			'/accelerometer_publisher'
			'/gyroscope_publisher'
		Publishers:
			'/movingAverageAccelerometer'
			'/movingAverageGyroscope'
	/poseEstimation.cpp
		This node receives the data of velocity and angle to update the x, y and theta values for a pose evaluation.
		Nodes:
			'PositionIntegrator'
		Subscribers:
			'/VelState'
			'/gyroAngle'
		Publishers:
			'/Pose'
	/positionIntegrator.cpp
		This node receives the data of velocity and integrate to update the x, y and z values.
		Nodes:
			'PositionIntegrator'
		Subscribers:
			'/VelState'
		Publishers:
			'/PositionState'
	/velIntegrator.cpp
		This node receives the data of the accelerometer to integrate and update the velocity values.
		Nodes:
			'VelIntegrator'
		Subscribers:
			'/accelerometer_publisher'
		Publishers:
			'/VelState'
	/velManual.cpp
		This node translates the signal from the turtlesim node 'turtle_teleop_key' for keyboard control of the GASRobot.
		Nodes:
			'vel_manual'
		Subscribers:
			'/turtle/cmd_vel'
		Publishers:
			'/left_motor'
			'/right_motor'
			


